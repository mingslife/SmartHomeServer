<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mingslife.dao.HumitureMapper">
  <resultMap id="BaseResultMap" type="com.mingslife.model.Humiture">
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="family_id" property="familyId" jdbcType="INTEGER" />
    <result column="temperature" property="temperature" jdbcType="VARCHAR" />
    <result column="humidity" property="humidity" jdbcType="VARCHAR" />
    <result column="record_date" property="recordDate" jdbcType="TIMESTAMP" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="BaseColumnList">
    id, family_id, temperature, humidity, record_date, create_date,
    update_date
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select
      <include refid="BaseColumnList" />
    from humitures
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from humitures
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.mingslife.model.Humiture" useGeneratedKeys="true" keyProperty="id">
    insert into humitures (
      id, family_id, temperature,
      humidity, record_date, create_date,
      update_date
    ) values (
      #{id,jdbcType=INTEGER}, #{familyId,jdbcType=INTEGER}, #{temperature,jdbcType=VARCHAR},
      #{humidity,jdbcType=VARCHAR}, #{recordDate,jdbcType=TIMESTAMP}, #{createDate,jdbcType=TIMESTAMP},
      #{updateDate,jdbcType=TIMESTAMP}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.mingslife.model.Humiture">
    insert into humitures
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="familyId != null">
        family_id,
      </if>
      <if test="temperature != null">
        temperature,
      </if>
      <if test="humidity != null">
        humidity,
      </if>
      <if test="recordDate != null">
        record_date,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="familyId != null">
        #{familyId,jdbcType=INTEGER},
      </if>
      <if test="temperature != null">
        #{temperature,jdbcType=VARCHAR},
      </if>
      <if test="humidity != null">
        #{humidity,jdbcType=VARCHAR},
      </if>
      <if test="recordDate != null">
        #{recordDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.mingslife.model.Humiture">
    update humitures
    <set>
      <if test="familyId != null">
        family_id = #{familyId,jdbcType=INTEGER},
      </if>
      <if test="temperature != null">
        temperature = #{temperature,jdbcType=VARCHAR},
      </if>
      <if test="humidity != null">
        humidity = #{humidity,jdbcType=VARCHAR},
      </if>
      <if test="recordDate != null">
        record_date = #{recordDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mingslife.model.Humiture">
    update humitures
    set
      family_id = #{familyId,jdbcType=INTEGER},
      temperature = #{temperature,jdbcType=VARCHAR},
      humidity = #{humidity,jdbcType=VARCHAR},
      record_date = #{recordDate,jdbcType=TIMESTAMP},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="select" resultMap="BaseResultMap">
    select
    <if test="parameters != null">
      ${parameters}
    </if>
    <if test="parameters == null">
      *
    </if>
    from humitures
    <if test="condition != null">
      where ${condition}
    </if>
    <if test="order != null and sort != null">
      order by ${order} ${sort}
    </if>
    <if test="offset != -1 and limit != -1">
      limit #{offset,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
    </if>
  </select>
  <select id="count" resultType="long">
    select count(
    <if test="isDistinct == true">
      distinct
    </if>
    <if test="parameters != null">
      ${parameters}
    </if>
    <if test="parameters == null">
      *
    </if>
    ) from humitures
    <if test="condition != null">
      where ${condition}
    </if>
  </select>
  <select id="sum" resultType="double">
    select sum(
    <if test="isDistinct == true">
      distinct
    </if>
    ${parameter}) from humitures
    <if test="condition != null">
      where ${condition}
    </if>
    <if test="order != null and sort != null">
      order by ${order} ${sort}
    </if>
    <if test="offset != -1 and limit != -1">
      limit #{offset,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
    </if>
  </select>
  <select id="find" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select ${parameters} from humitures where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="loadByFamilyId" resultMap="BaseResultMap">
    select id, family_id, temperature, humidity, record_date from humitures where family_id = #{familyId,jdbcType=INTEGER} order by record_date desc
  </select>
  <select id="findByFamilyIdAndId" resultMap="BaseResultMap">
    select id, family_id, temperature, humidity, record_date from humitures where family_id = #{familyId,jdbcType=INTEGER} and id = #{id,jdbcType=INTEGER}
  </select>
  <select id="findLastestByFamilyId" resultMap="BaseResultMap">
    select id, family_id, temperature, humidity, record_date from humitures where family_id = #{familyId,jdbcType=INTEGER} order by record_date desc limit 1
  </select>
</mapper>
